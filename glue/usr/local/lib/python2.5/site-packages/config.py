import os
import sqlite3
import shutil

class Config(object):
    '''The configuration database object. It uses sqlite.
    '''

    def __init__(self, dbFile=''):
        self.cfgMount = '/cfg'
        self.confTable = 'system'
        self.needCommit = False
        self.delim = '\x1F'
        #self.isolationLevel = 'IMMEDIATE'
        self.isolationLevel = None
        if dbFile:
            self.dbFile = dbFile
        else:
            self.dbFile = '/etc/config.db'
        if not os.path.exists(self.dbFile):
            raise ValueError, 'Config DB "%s" does not exist.' % self.dbFile
        self._connect(self.dbFile)

    def _connect(self, dbFile):
        self.con = sqlite3.connect(dbFile, check_same_thread=True)
        self.con.isolation_level = self.isolationLevel
        self.cur = self.con.cursor()
        
    def close(self):
        self.cur.close()
        self.con.close()

    def getVar(self, tkey):
        '''Get a config variable from the config database
        '''
        query = 'SELECT type, value FROM %s WHERE key = ?' % self.confTable
        self.cur.execute(query, (tkey,))
        try:
            rtype, rvalue = self.cur.fetchone()
            if rtype == 'str':
                return unicode(rvalue)
            elif rtype == 'bool':
                return rvalue == 'True'
            elif rtype == 'list':
                if self.delim in rvalue:
                    return rvalue.split(self.delim)
                else:
                    return [rvalue]
            else:
                raise TypeError, '%s has an invalid type: %s'  % rkey, rtype
        except:
            return ''

    def getVars(self, tkey='%'):
        '''Get a config dictionary from the config database
        '''
        # Substitute * into %
        tkey = tkey.replace('*', '%')
        if tkey[-1] != '%':
            tkey += '%'
        query = 'SELECT key, type, value FROM %s WHERE key LIKE ? ORDER BY key ASC' % self.confTable
        self.cur.execute(query, (tkey,))
        results = self.cur.fetchall()
        # Assign to a dictionary
        rdict = {}
        for result in results:
            rkey = result[0]
            rtype = result[1]
            rvalue = result[2]
            if rtype == 'str':
                rdict[rkey] = unicode(rvalue)
            elif rtype == 'bool':
                rdict[rkey] = rvalue == 'True'
            elif rtype == 'list':
                if self.delim in rvalue:
                    rdict[rkey] = rvalue.split(self.delim)
                else:
                    rdict[rkey] = [rvalue]
            else:
                raise TypeError, '%s has an invalid type: %s' % rkey, rtype
        return rdict

    def setVar(self, tkey, tvalue):
        '''Set a config variable in the config database
        '''
        # Determine type and adapt value for storage
        if type(tvalue) == bool:
            ttype = 'bool'
            tvalue = unicode(tvalue)
        elif type(tvalue) == list:
            ttype = 'list'
            tvalue = self.delim.join(tvalue)
        else:
            ttype = 'str'
            tvalue = unicode(tvalue)
        # Check first to see if it exists
        query = 'SELECT COUNT(*) FROM %s WHERE key = ?' % self.confTable
        self.cur.execute(query, (tkey,))
        if self.cur.fetchone()[0] < 1:
            query = 'INSERT INTO %s (key, type, value) VALUES (?, ?, ?)' % self.confTable
            self.cur.execute(query, (tkey, ttype, tvalue))
        else:
            query = 'UPDATE %s SET type = ?, value = ? WHERE key = ?' % self.confTable
            self.cur.execute(query, (ttype, tvalue, tkey))

        if self.isolationLevel != None:
            self.needCommit = True

    def setVars(self, dict):
        '''Set a dictionary into the config database
        '''
        for key, value in dict.iteritems():
            self.setVar(key, value)

    def delVar(self, tkey):
        '''Delete a config entry 
        '''
        query = 'DELETE FROM %s WHERE key = ?' % self.confTable
        self.cur.execute(query, (tkey,))

    def delVars(self, tkey):
        '''Delete multiple config entries via the wildcard
        '''
        # Substitute * into %
        tkey = tkey.replace('*', '%')
        query = 'DELETE FROM %s WHERE key LIKE ?' % self.confTable
        self.cur.execute(query, (tkey,))

    def commit(self):
        '''Commit the configuration database.  Not needed when
        isolationLevel = None because commits then happen automatically.
        '''
        # Simply tell the SQLite connection to commit to disk
        if self.con.commit():
            self.needCommit = False
            return True
        return False

    def copy(self, target=''):
        '''Copy to a seperate location. eg. from a malloc disk to a hard drive.
        '''
        if target:
            if shutil.copy(self.dbFile, target):
                return True
        return False

    def dump(self):
        '''Dump the database.
        '''
        # CREATE TABLE...
        self.cur.execute('SELECT name, sql FROM sqlite_master')
        (table, output) = self.cur.fetchone()
        output = 'BEGIN TRANSACTION;\n%s;\n' % output
        # INSERT INTO...
        self.cur.execute('SELECT * FROM %s' % table)
        for row in self.cur.fetchall():
            values = ', '.join([repr(str(x)) for x in row])
            output += 'INSERT INTO "%s" VALUES(%s);\n' % (table, values)
        # End the dump
        output += 'COMMIT;\n'
        return output

    def load(self, input):
        '''Load the database from SQL statements.
        '''
        pass

