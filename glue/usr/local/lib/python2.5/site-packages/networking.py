import socket
import struct

def inet4atoi(addr):
    '''Convert ip address to long int
    '''
    return struct.unpack('L', socket.inet_aton(addr))[0]

def inet4itoa(num):
    '''Convert long int to ip address
    '''
    return socket.inet_ntoa(struct.pack('L', num))

def netmask4(num):
    '''Create a netmask of num bits
    '''
    if num > 32:
        raise ValueError, 'Passed netmask larger than /32'
    elif num == 32:
        return 0L
    else:
        num = 32 - num
        return (2L << num - 1) - 1

def invertNetmask4(netmask):
    '''Invert the bits of a netmask, like in the Cisco hostmask
    '''
    # invert the netmask
    invertednetmask = inet4atoi(netmask) ^ 0xffffffff
    # turn into a dotted quad and return
    return inet_itoa(invertedNetmask)

def isAddr4(addr):
    '''Test whether string is the right format to be an IPv4 address
    '''
    addr = addr.split('.')
    if len(addr) != 4:
        return False
    for octet in addr:
        try:
            if int(octet) < 0 or int(octet) > 255:
                return False
        except ValueError:
            return False
    return True

