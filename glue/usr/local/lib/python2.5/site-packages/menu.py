def confirm(msg=None):
    if not msg:
        msg = 'Are you sure?'
    confirm = raw_input('%s [y/N] ' % msg).lower() 
    if confirm == 'y':
        return True
    else:
        return False

class Menu(object):
    def __init__(self, title, items, actions):
        if type(title) != str and type(title) != unicode:
            raise TypeError('title type is \'%s\', not \'unicode\' or \'str\'' % type(title))
        if type(items) != dict:
            raise TypeError('menu items are type \'%s\', not \'dict\'' % type(items))
        if type(actions) != dict:
            raise TypeError('menu actions are type \'%s\', not \'dict\'' % type(actions))
        if len(items) != len(actions):
            raise ValueError('items and choices length mismatch')

        self.title = title
        self.items = items
        self.actions = actions
        self.choice = ''
        self.prompt = '> '

    def display(self): 
        print('===== %s =====' % self.title)
        keys = self.items.keys()
        keys.sort()
        for key in keys:
             print('%s  - %s' % (key, self.items[key]))
        print('*  - Exit from %s' % (self.title))

    def getInput(self):
        '''Get input from the user.
        '''
        self.choice = raw_input(self.prompt)
        if self.choice in self.items.keys():
            return(True)
        return(False)

    def execute(self):
        '''Execute the action chosen in the menu.
        '''
        if self.choice in self.items.keys():
            if type(self.actions[self.choice]) == tuple:
                f = self.actions[self.choice][0]
                args = self.actions[self.choice][1:]
            else:
                f = self.actions[self.choice]
                args = ()
            if callable(f):
                f(*args)
                return(True)
        return(False)        

    def run(self):
        '''Run this menu until the user actively exits it.
           Simply call run() instead of the display()/getInput()/execute() combo.
        '''
        while True:
            self.display()
            if not self.getInput():
                break
            self.execute()
        return(True)
